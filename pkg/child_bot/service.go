package child_bot

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/rs/zerolog"
	"github.com/vahter-robot/backend/pkg/child_state"
	"github.com/vahter-robot/backend/pkg/peer"
	"github.com/vahter-robot/backend/pkg/user"
	"golang.org/x/sync/errgroup"
	"io"
	"net"
	"net/http"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"
)

type service struct {
	childBotHost         string
	childBotPort         string
	childTokenPathPrefix string
	childStateRepo       *child_state.Repo
	userRepo             *user.Repo
	peerRepo             *peer.Repo
	childBotRepo         *Repo
	keywordsLimit        uint16
	inLimitPerKeyword    uint16
	inLimitChars         uint16
	outLimitChars        uint16
	parentBotUsername    string
	logger               zerolog.Logger
}

func NewService(
	logger zerolog.Logger,
	childBotHost,
	childBotPort,
	childTokenPathPrefix string,
	childStateRepo *child_state.Repo,
	userRepo *user.Repo,
	peerRepo *peer.Repo,
	childBotRepo *Repo,
	keywordsLimitPerBot,
	inLimitPerKeyword,
	inLimitChars,
	outLimitChars uint16,
	parentBotUsername string,
) *service {
	return &service{
		childBotHost:         childBotHost,
		childBotPort:         childBotPort,
		childTokenPathPrefix: childTokenPathPrefix,
		childStateRepo:       childStateRepo,
		userRepo:             userRepo,
		peerRepo:             peerRepo,
		childBotRepo:         childBotRepo,
		keywordsLimit:        keywordsLimitPerBot,
		inLimitPerKeyword:    inLimitPerKeyword,
		inLimitChars:         inLimitChars,
		outLimitChars:        outLimitChars,
		parentBotUsername:    parentBotUsername,
		logger:               logger.With().Str("package", "child_bot").Logger(),
	}
}

const (
	start       = "/start"
	help        = "/help"
	getStart    = "/get_start"
	setStart    = "/set_start"
	getKeywords = "/get_keywords"
	setKeywords = "/set_keywords"

	userForward    = "üë§ "
	chatForward    = "üí¨ "
	messageForward = "‚úâÔ∏è "
	mute           = "mute"

	yes   = "–¥–∞"
	no    = "–Ω–µ—Ç"
	delim = "==="
	comma = ","
)

func (s *service) Serve(ctx context.Context, setWebhooks bool) error {
	if setWebhooks {
		go func() {
			wh := s.childBotRepo.Get(ctx)
			for item := range wh {
				if item.Err != nil {
					s.logger.Error().Err(item.Err).Send()
					return
				}

				api, err := tgbotapi.NewBotAPI(item.Doc.Token)
				if err != nil {
					s.logger.Warn().Err(err).Send()
					continue
				}

				_, err = api.SetWebhook(tgbotapi.NewWebhook(fmt.Sprintf(
					"%s/%s/%s", s.childBotHost, s.childTokenPathPrefix, item.Doc.Token,
				)))
				if err != nil {
					s.logger.Warn().Err(err).Send()
					continue
				}

				err = s.childBotRepo.SetWebhookNow(ctx, item.Doc.ID)
				if err != nil {
					s.logger.Error().Err(err).Send()
					continue
				}
			}
		}()
	}

	mux := http.NewServeMux()
	mux.HandleFunc("/healthz", func(w http.ResponseWriter, _ *http.Request) {
		_, err := w.Write(nil)
		if err != nil {
			s.logger.Error().Err(err).Send()
		}
	})
	pathPrefix := fmt.Sprintf("/%s/", s.childTokenPathPrefix)
	mux.HandleFunc(pathPrefix, func(w http.ResponseWriter, r *http.Request) {
		rc, cancel := context.WithTimeout(r.Context(), 10*time.Second)
		defer cancel()

		token := strings.TrimPrefix(r.URL.Path, pathPrefix)

		s.logger.Debug().Str("path", r.URL.Path).Str("token", token).Msg("got request")

		whOK, err := s.handle(rc, token, r.Body)
		if err != nil {
			s.logger.Warn().Err(err).Send()
		}

		if !whOK {
			w.WriteHeader(http.StatusNotFound)
		}
		_, err = w.Write(nil)
		if err != nil {
			s.logger.Error().Err(err).Send()
		}
	})

	srv := &http.Server{
		Addr:    net.JoinHostPort("0.0.0.0", s.childBotPort),
		Handler: mux,
	}
	go func() {
		<-ctx.Done()
		sc, cancel := context.WithTimeout(context.Background(), time.Minute)
		defer cancel()

		err := srv.Shutdown(sc)
		if err != nil {
			s.logger.Error().Err(err).Send()
		}
	}()

	err := srv.ListenAndServe()
	if err != nil && !errors.Is(err, http.ErrServerClosed) {
		return fmt.Errorf("srv.ListenAndServe: %w", err)
	}

	return nil
}

type update struct {
	Message message `json:"message"`
}

type message struct {
	MessageID      int64          `json:"message_id"`
	Chat           chat           `json:"chat"`
	From           from           `json:"from"`
	Text           string         `json:"text"`
	ReplyToMessage replyToMessage `json:"reply_to_message"`
}

type replyToMessage struct {
	MessageID int64  `json:"message_id"`
	From      from   `json:"from"`
	Text      string `json:"text"`
}

type chat struct {
	ID int64 `json:"id"`
}

type from struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	Username  string `json:"username"`
}

func (s *service) handle(ctx context.Context, token string, body io.ReadCloser) (bool, error) {
	defer func() {
		err := body.Close()
		if err != nil {
			s.logger.Error().Err(err).Send()
		}
	}()

	b, err := io.ReadAll(body)
	if err != nil {
		return true, fmt.Errorf("io.ReadAll: %w", err)
	}

	s.logger.Debug().Str("body", string(b)).Send()

	var upd update
	err = json.Unmarshal(b, &upd)
	if err != nil {
		return true, fmt.Errorf("json.Unmarshal: %w", err)
	}

	if upd.Message.Text == "" {
		return true, nil
	}

	bot, found, err := s.childBotRepo.GetByToken(ctx, token)
	if err != nil {
		return true, fmt.Errorf("s.childBotRepo.GetByToken: %w", err)
	}
	if !found {
		return false, nil
	}

	var eg errgroup.Group
	var owner user.User
	eg.Go(func() error {
		r, e := s.userRepo.GetByID(ctx, bot.OwnerUserID)
		if e != nil {
			return fmt.Errorf("s.userRepo.GetByID: %w", e)
		}
		owner = r
		return nil
	})

	var api *tgbotapi.BotAPI
	eg.Go(func() error {
		r, e := tgbotapi.NewBotAPI(bot.Token)
		if e != nil {
			return fmt.Errorf("tgbotapi.NewBotAPI: %w", e)
		}
		api = r
		return nil
	})
	err = eg.Wait()
	if err != nil {
		return true, fmt.Errorf("eg.Wait: %w", err)
	}

	switch upd.Message.From.ID {
	case owner.TgUserID:
		err = s.handleOwner(ctx, api, upd, bot, owner)
		if err != nil {
			return true, fmt.Errorf("s.handleOwner: %w", err)
		}
	default:
		err = s.handlePeer(ctx, api, upd, bot)
		if err != nil {
			return true, fmt.Errorf("s.handlePeer: %w", err)
		}
	}
	return true, nil
}

func (s *service) handleOwner(ctx context.Context, api *tgbotapi.BotAPI, upd update, bot Bot, owner user.User) error {
	err := s.childBotRepo.SetUserChatID(ctx, bot.ID, upd.Message.Chat.ID)
	if err != nil {
		return fmt.Errorf("s.childBotRepo.SetUserChatID: %w", err)
	}

	text := upd.Message.Text
	replyText := upd.Message.ReplyToMessage.Text
	if strings.HasPrefix(replyText, userForward) && upd.Message.ReplyToMessage.From.Username == api.Self.UserName {
		rows := strings.Split(replyText, "\n")
		if len(rows) >= 3 {
			uID, e := strconv.Atoi(strings.TrimPrefix(rows[0], userForward))
			if e != nil {
				return fmt.Errorf("strconv.Atoi: %w", e)
			}
			userID := int64(uID)

			cID, e := strconv.Atoi(strings.TrimPrefix(rows[1], chatForward))
			if e != nil {
				return fmt.Errorf("strconv.Atoi: %w", e)
			}
			chatID := int64(cID)

			if text == mute {
				e = s.peerRepo.CreateMuted(ctx, bot.ID, userID, chatID)
				if e != nil {
					return fmt.Errorf("s.peerRepo.CreateMuted: %w", e)
				}

				e = s.replyOK(api, upd, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
				if e != nil {
					return fmt.Errorf("s.replyOK: %w", e)
				}
				return nil
			}

			messageID, e := strconv.Atoi(strings.TrimPrefix(rows[2], messageForward))
			if e != nil {
				return fmt.Errorf("strconv.Atoi: %w", e)
			}

			_, e = api.Send(tgbotapi.MessageConfig{
				BaseChat: tgbotapi.BaseChat{
					ChatID:           chatID,
					ReplyToMessageID: messageID,
				},
				Text: text,
			})
			if e != nil {
				er := s.replyErr(api, upd, "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞")
				if er != nil {
					return fmt.Errorf("s.replyErr: %w", er)
				}
				return nil
			}

			e = s.replyOK(api, upd, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
			if e != nil {
				return fmt.Errorf("s.replyOK: %w", e)
			}
		}
	}

	switch text {
	case start, setStart:
		e := s.handleOwnerStart(ctx, api, upd, bot, owner)
		if e != nil {
			return fmt.Errorf("s.handleOwnerStart: %w", e)
		}
	case help:
		e := s.handleOwnerHelp(ctx, api, upd, bot, owner)
		if e != nil {
			return fmt.Errorf("s.handleOwnerHelp: %w", e)
		}
	case setKeywords:
		e := s.handleOwnerSetKeywords(ctx, api, upd, bot, owner)
		if e != nil {
			return fmt.Errorf("s.handleOwnerSetKeywords: %w", e)
		}
	case getKeywords:
		e := s.handleOwnerGetKeywords(api, upd, bot)
		if e != nil {
			return fmt.Errorf("s.handleOwnerGetKeywords: %w", e)
		}
	case getStart:
		e := s.handleOwnerGetStart(api, upd, bot)
		if e != nil {
			return fmt.Errorf("s.handleOwnerGetStart: %w", e)
		}
	default:
		scene, e := s.childStateRepo.GetScene(ctx, owner.ID, bot.ID)
		if e != nil {
			return fmt.Errorf("s.childStateRepo.GetScene: %w", e)
		}

		switch scene {
		case child_state.SetStart:
			e = s.childBotRepo.SetOnPeerStart(ctx, bot.ID, text)
			if e != nil {
				return fmt.Errorf("s.childBotRepo.SetOnPeerStart: %w", e)
			}

			if !bot.SetupDone {
				e = s.handleOwnerSetKeywords(ctx, api, upd, bot, owner)
				if e != nil {
					return fmt.Errorf("s.handleOwnerSetKeywords: %w", e)
				}
				return nil
			}

			e = s.childStateRepo.SetScene(ctx, owner.ID, bot.ID, child_state.None)
			if e != nil {
				return fmt.Errorf("s.childBotRepo.SetOnPeerStart: %w", e)
			}

			e = s.replyOK(api, upd, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
			if e != nil {
				return fmt.Errorf("s.replyOK: %w", e)
			}
			return nil
		case child_state.SetKeywords:
			kws, m, ok := s.parseKeywordsAndMode(text)
			if !ok {
				e = s.replyErr(api, upd, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç / –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã –ª–∏–º–∏—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ "+
					"–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–∏–º–µ—Ä—É")
				if e != nil {
					return fmt.Errorf("s.replyErr: %w", e)
				}
				return nil
			}

			e = s.childBotRepo.SetKeywordsAndMode(ctx, bot.ID, kws, m)
			if e != nil {
				return fmt.Errorf("s.childBotRepo.SetKeywordsAndMode: %w", e)
			}

			if !bot.SetupDone {
				e = s.childBotRepo.SetSetupDoneTrue(ctx, bot.ID)
				if e != nil {
					return fmt.Errorf("s.childBotRepo.SetSetupDoneTrue: %w", e)
				}
			}

			e = s.childStateRepo.SetScene(ctx, owner.ID, bot.ID, child_state.None)
			if e != nil {
				return fmt.Errorf("s.childBotRepo.SetOnPeerStart: %w", e)
			}

			if !bot.SetupDone {
				e = s.replyOK(api, upd, "–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç üëç. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ "+
					"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ @BotFather")
				if e != nil {
					return fmt.Errorf("s.replyOK: %w", e)
				}
				return nil
			}

			e = s.replyOK(api, upd, "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
			if e != nil {
				return fmt.Errorf("s.replyOK: %w", e)
			}
			return nil
		default:
			e = s.replyErr(api, upd, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
			if e != nil {
				return fmt.Errorf("s.replyErr: %w", e)
			}
			return nil
		}
	}
	return nil
}

func (s *service) handleOwnerHelp(
	ctx context.Context,
	api *tgbotapi.BotAPI,
	upd update,
	bot Bot,
	owner user.User,
) error {
	err := s.childStateRepo.SetScene(ctx, owner.ID, bot.ID, child_state.None)
	if err != nil {
		return fmt.Errorf("s.childStateRepo.SetScene: %w", err)
	}

	err = s.reply(api, upd, fmt.Sprintf(`–ö–æ–º–∞–Ω–¥—ã

%s ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
%s ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ

%s ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã, –ø—Ä–∞–≤–∏–ª–∞ –±–∞–Ω–∞
%s ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö

%s ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –ª—é–±–æ–≥–æ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @%s`,
		getStart, setStart, getKeywords, setKeywords, help, s.parentBotUsername),
	)
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}

	return nil
}

func (s *service) handleOwnerStart(
	ctx context.Context,
	api *tgbotapi.BotAPI,
	upd update,
	bot Bot,
	owner user.User,
) error {
	err := s.childStateRepo.SetScene(ctx, owner.ID, bot.ID, child_state.SetStart)
	if err != nil {
		return fmt.Errorf("s.childStateRepo.SetScene: %w", err)
	}

	err = s.reply(api, upd, "–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å "+
		"–∫–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞—é—Ç –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'? –ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç, —Å–ª—É—à–∞—é –≤–∞—Å'")
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}

	return nil
}

func (s *service) handleOwnerSetKeywords(
	ctx context.Context,
	api *tgbotapi.BotAPI,
	upd update,
	bot Bot,
	owner user.User,
) error {
	err := s.childStateRepo.SetScene(ctx, owner.ID, bot.ID, child_state.SetKeywords)
	if err != nil {
		return fmt.Errorf("s.childStateRepo.SetScene: %w", err)
	}

	err = s.reply(api, upd, fmt.Sprintf(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 50), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –ø–æ–¥ –ø—Ä–∞–≤–∏–ª–∞, –±–æ—Ç –ø–µ—Ä–µ—à–ª–µ—Ç –µ–≥–æ –≤–∞–º (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ). –§–æ—Ä–º–∞—Ç:
- –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '1' ‚Äî –±–æ—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–ª–µ–µ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à—É –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '2' ‚Äî –±–æ—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –∏ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∏–µ;
- –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ–∂–∏–¥–∞–µ–º—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–µ –±–æ–ª–µ–µ 25);
- –ó–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç (–Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º);
- –î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ –ª–∏ –±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '–¥–∞' ‚Äì –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, –¥–∞–ª–µ–µ –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–≥–æ, –±–æ—Ç –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤–∞–º –Ω–∏ –ø–µ—Ä–≤–æ–µ –Ω–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '–Ω–µ—Ç' ‚Äî –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, –ø–µ—Ä–µ—à–ª–µ—Ç –≤–∞–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –∞ –∑–∞–±–∞–Ω–∏—Ç—å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏–≤ '%s';
- –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã '==='.

–ù–∞–ø—Ä–∏–º–µ—Ä:

1
===
–≤–∞–∫–∞–Ω—Å
===
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–æ —è –Ω–µ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã
===
–¥–∞
===
—Ä–µ–∫–ª–∞–º–∞,–ø—Ä–∞–π—Å
===
–ü—Ä–∞–π—Å –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ –∫–∞–Ω–∞–ª–µ:

1) –°—Ç–∞—Ä—Ç–∞–ø—ã –∏ –±–∏–∑–Ω–µ—Å
100 —Ä—É–±–ª–µ–π

–ï—Å–ª–∏ —Ü–µ–Ω–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å
===
–Ω–µ—Ç
===
—Å–æ—Ç—Ä—É–¥–Ω–∏—á,–ø–∞—Ä—Ç–Ω–µ—Ä
===
–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º
===
–Ω–µ—Ç`, mute))
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}

	return nil
}

func (s *service) handleOwnerGetKeywords(
	api *tgbotapi.BotAPI,
	upd update,
	bot Bot,
) error {
	var keywords string
	for _, word := range bot.Keywords {
		keywords += fmt.Sprintf(`

%s
===
%s
===
%s`, strings.Join(word.In, comma), word.Out, boolToRU(word.Ban))
	}

	err := s.reply(api, upd, fmt.Sprintf(`–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (%d/%d). –§–æ—Ä–º–∞—Ç:
–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
===
–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç
===
–ë–∞–Ω–∏—Ç—å
%s

%s`, len(bot.Keywords), s.keywordsLimit, keywords, help))
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}

	return nil
}

func (s *service) handleOwnerGetStart(
	api *tgbotapi.BotAPI,
	upd update,
	bot Bot,
) error {
	err := s.reply(api, upd, fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–∫–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞—é—Ç –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å')

%s

%s`, bot.OnPeerStart, help))
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}

	return nil
}

func (s *service) handlePeer(ctx context.Context, api *tgbotapi.BotAPI, upd update, bot Bot) error {
	// (1) user: /start
	// (2) bot : start reaction
	// (3) user: first real message
	if bot.Mode == OnlyFirst && upd.Message.MessageID > 3 {
		return nil
	}

	muted, err := s.peerRepo.IsMuted(ctx, bot.ID, upd.Message.From.ID)
	if err != nil {
		return fmt.Errorf("s.peerRepo.IsMuted: %w", err)
	}
	if muted {
		return nil
	}

	text := upd.Message.Text
	if text == start && bot.OnPeerStart != "" {
		e := s.reply(api, upd, bot.OnPeerStart)
		if e != nil {
			return fmt.Errorf("s.reply: %w", e)
		}
		return nil
	}

	var match bool
kws:
	for _, kw := range bot.Keywords {
		for _, in := range kw.In {
			if strings.Contains(text, in) {
				if kw.Ban {
					e := s.peerRepo.CreateMuted(ctx, bot.ID, upd.Message.From.ID, upd.Message.Chat.ID)
					if e != nil {
						return fmt.Errorf("s.peerRepo.CreateMuted: %w", e)
					}

					e = s.reply(api, upd, kw.Out)
					if e != nil {
						return fmt.Errorf("s.reply: %w", e)
					}
					return nil
				}

				e := s.peerRepo.Create(ctx, bot.ID, upd.Message.From.ID, upd.Message.Chat.ID)
				if e != nil {
					return fmt.Errorf("s.peerRepo.Create: %w", e)
				}

				e = s.reply(api, upd, kw.Out)
				if e != nil {
					return fmt.Errorf("s.reply: %w", e)
				}

				if bot.OwnerUserChatID != 0 {
					_, e = api.Send(tgbotapi.MessageConfig{
						BaseChat: tgbotapi.BaseChat{
							ChatID: bot.OwnerUserChatID,
						},
						Text: fmt.Sprintf(`%s%d
%s%d
%s%d

%s / %s
%s

–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª
%s

–í—ã –º–æ–∂–µ—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, –∏–ª–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' '%s' —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –µ–≥–æ`,
							userForward, upd.Message.From.ID,
							chatForward, upd.Message.Chat.ID,
							messageForward, upd.Message.MessageID,
							tplName(upd.Message.From.FirstName), tplUsername(upd.Message.From.Username),
							text,
							kw.Out,
							mute),
					})
					if e != nil {
						return fmt.Errorf("api.Send: %w", e)
					}
				}

				match = true
				break kws
			}
		}
	}

	if !match {
		e := s.peerRepo.Create(ctx, bot.ID, upd.Message.From.ID, upd.Message.Chat.ID)
		if e != nil {
			return fmt.Errorf("s.peerRepo.Create: %w", e)
		}

		_, e = api.Send(tgbotapi.MessageConfig{
			BaseChat: tgbotapi.BaseChat{
				ChatID: bot.OwnerUserChatID,
			},
			Text: fmt.Sprintf(`%s%d
%s%d
%s%d

%s / %s
%s

–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª

–í—ã –º–æ–∂–µ—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, –∏–ª–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' %s —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –µ–≥–æ`,
				userForward, upd.Message.From.ID,
				chatForward, upd.Message.Chat.ID,
				messageForward, upd.Message.MessageID,
				tplName(upd.Message.From.FirstName), tplUsername(upd.Message.From.Username),
				text,
				mute),
		})
		if e != nil {
			return fmt.Errorf("api.Send: %w", e)
		}
	}
	return nil
}

func (s *service) reply(api *tgbotapi.BotAPI, upd update, text string) error {
	_, err := api.Send(tgbotapi.MessageConfig{
		BaseChat: tgbotapi.BaseChat{
			ChatID:           upd.Message.Chat.ID,
			ReplyToMessageID: int(upd.Message.MessageID),
		},
		Text: text,
	})
	if err != nil {
		return fmt.Errorf("api.Send: %w", err)
	}
	return nil
}

func (s *service) replyOK(api *tgbotapi.BotAPI, upd update, text string) error {
	err := s.reply(api, upd, "OK. "+text)
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}
	return nil
}

func (s *service) replyErr(api *tgbotapi.BotAPI, upd update, text string) error {
	err := s.reply(api, upd, fmt.Sprintf(`–û—à–∏–±–∫–∞. %s
%s`, text, help))
	if err != nil {
		return fmt.Errorf("s.reply: %w", err)
	}
	return nil
}

func boolToRU(b bool) string {
	if b {
		return yes
	}
	return no
}

func ruToBool(s string) (bool, bool) {
	low := strings.ToLower(s)
	switch low {
	case yes:
		return true, true
	case no:
		return false, true
	default:
		return false, false
	}
}

func (s *service) parseKeywordsAndMode(in string) ([]Keyword, mode, bool) {
	words := strings.Split(in, delim)
	if len(words)-1%3 != 0 || len(words) < 4 {
		return nil, 0, false
	}

	modeInt, err := strconv.Atoi(words[0])
	if err != nil {
		return nil, 0, false
	}

	var m mode
	switch mode(modeInt) {
	case OnlyFirst, Always:
		m = mode(modeInt)
	default:
		return nil, 0, false
	}

	var keywords []Keyword
	for i := 1; i < len(words); i += 3 {
		out := words[i+1]
		if utf8.RuneCountInString(out) > int(s.outLimitChars) {
			return nil, 0, false
		}

		rawInKws := strings.Split(words[i], comma)
		if len(rawInKws) > int(s.inLimitPerKeyword) {
			return nil, 0, false
		}

		unique := map[string]struct{}{}
		for _, kw := range rawInKws {
			k := strings.TrimSpace(kw)
			if k == "" || utf8.RuneCountInString(k) > int(s.inLimitChars) {
				return nil, 0, false
			}

			unique[k] = struct{}{}
		}

		kwIn := make([]string, len(unique))
		ix := 0
		for kw := range unique {
			kwIn[ix] = kw
			ix += 1
		}

		ban, ok := ruToBool(words[i+2])
		if !ok {
			return nil, 0, false
		}

		keywords = append(keywords, Keyword{
			In:  kwIn,
			Out: out,
			Ban: ban,
		})
	}
	if len(keywords) > int(s.keywordsLimit) {
		return nil, 0, false
	}

	return keywords, m, true
}

func tplName(in string) string {
	name := "–ù–µ—Ç –∏–º–µ–Ω–∏"
	if in != "" {
		name = in
	}
	return name
}

func tplUsername(in string) string {
	username := "–ù–µ—Ç username"
	if in != "" {
		username = "@" + in
	}
	return username
}
